# Prometheus and Grafana configuration for Pod Metrics Dashboard
# Optimized for Kind cluster with 7-day historical analysis support

prometheus:
  prometheusSpec:
    # Data retention for 7-day analysis (10 days with buffer)
    retention: 10d
    retentionSize: 8GB
    
    # Scraping configuration
    scrapeInterval: 30s
    evaluationInterval: 30s
    
    # Storage configuration
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 15Gi
    
    # Resource limits for Kind cluster
    resources:
      requests:
        memory: 512Mi
        cpu: 200m
      limits:
        memory: 2Gi
        cpu: 1000m

    # Additional scrape configs for better pod monitoring
    additionalScrapeConfigs: []

grafana:
  # Enable Grafana
  enabled: true
  
  # Admin credentials
  adminPassword: "pod-metrics-admin"
  
  # Use emptyDir for Kind cluster (development setup)
  persistence:
    enabled: false
  
  # Resource limits for Kind cluster
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 500m
  
  # Let the chart configure datasources automatically
  # datasources will be auto-configured by kube-prometheus-stack
  
  # Import default Kubernetes dashboards
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  
  # Service configuration
  service:
    type: ClusterIP
    port: 80

# AlertManager configuration
alertmanager:
  enabled: true
  alertmanagerSpec:
    resources:
      requests:
        memory: 64Mi
        cpu: 50m
      limits:
        memory: 256Mi
        cpu: 200m
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 2Gi

# Node Exporter - collect node metrics
nodeExporter:
  enabled: true

# kube-state-metrics - collect Kubernetes object metrics
kubeStateMetrics:
  enabled: true

# Prometheus Operator
prometheusOperator:
  enabled: true
  resources:
    requests:
      memory: 64Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 200m

# Global settings
global:
  rbac:
    create: true
    pspEnabled: false

# Disable some components not needed for Kind
kubeApiServer:
  enabled: true
kubelet:
  enabled: true
kubeControllerManager:
  enabled: false  # Not available in Kind
kubeScheduler:
  enabled: false  # Not available in Kind
kubeProxy:
  enabled: false  # Not needed for our use case
kubeEtcd:
  enabled: false  # Not available in Kind

# Configure service monitors for better pod monitoring
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false
    configReloaders: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: false
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
